# Built using the guide: 
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html

# Objective:
# 0. Create development image for tests to run in. 
# 1. Test applications ( if applicable ) in their development containers. 
# 2. Build production images using docker-compose.
# 3. Push the production images to DockerHub.
# 4. Run an ansible playbook to deploy everything. 

variables :
  GIT_STRATAGY : none

stages:     
  - build-dev-images
  - build-api
  - build-ui
  - test-api
  - teardown-dev
  - build-production-images

# list container ids and stop and kill.
.pre : 
  script:
    - echo 'Killing remaining containers.'
    - docker ps -aq | xargs docker stop
    - docker ps -aq | xargs docker rm  

# Build the api using the typescript compiler.
# Hold on to build.
build-dev-images:
  tags: [ 'build' ]
  stage: build-dev-images
  script:
    - echo "Building images using docker-compose."
    - docker-compose --file docker-compose.dev.yaml up --detach --build
    - ls

build-api:
  tags : [ 'build' ]
  stage: build-api
  script:
    - echo "Compiling typescript...."
    - docker exec api npm run build-prod
  artifacts:
    paths : [ ./api/dist ]

build-ui:
  tags : [ 'build' ]
  stage : build-ui
  script:
    - docker exec ui npm run build-prod
  artifacts :
    paths : [ ./ui/build ]

test-api:
  tags: [ 'test' ]
  stage: test-api
  script:
    - echo "Testing api..."
    - docker exec api npm run test

# Clean up to avoid potential naming conflicts.
teardown-dev: 
  tags : [ 'build' ]
  stage : 'teardown-dev'
  script:
    - echo 'Killing remaining containers.'
    - docker ps -aq | xargs docker stop
    - docker ps -aq | xargs docker rm  

# Build the ( production ) containers
build-production-images: 
  tags : [ 'build' ]
  stage : 'build-production-images'
  script :
    - ls -lah api
    - ls -lah ui  #&& echo "Building docker images..."
    #- docker compose --file docker-compose.prod.yaml build && echo "Production docker images built."
