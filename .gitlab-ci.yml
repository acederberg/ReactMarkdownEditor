# Built using the guide: 
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html

# ETC
# https://stackoverflow.com/questions/25409700/using-gitlab-token-to-clone-without-authentication

# Objective:
# 0. Create development image for tests to run in. 
# 1. Test applications ( if applicable ) in their development containers. 
# 2. Build production images using docker-compose.
# 3. Push the production images to DockerHub.
# 4. Run an ansible playbook to deploy everything. 

variables :
  COMPOSE_HTTP_TIMEOUT : 3600
  GIT_STRATEGY : none
  LAZY : 0 #Must be int.

stages:    
  - get-git
  - build-dev-images
  - build-api
  - build-ui
  - test-api
  - teardown-dev
  - build-production-images
  - distribute-images
  - deploy

# list container ids and stop and kill.
.pre : 
  script:
    - echo 'Killing remaining containers.'
    - docker ps -aq | xargs docker stop
    - docker ps -aq | xargs docker rm  

get-git:
  variables : 
    GIT_IS_ALIVE : $( ls | grep .git | wc --words )

  tags : [ 'build' ]
  stage : get-git
  script :
    - echo 'Manually fetching git repository...'
    - source ~/.bashrc
    - > 
        if (( $(ls -a | grep --max-count=1 .git | wc --words) == 1 ));
        then
                echo 'Fetching git repository...'
                git fetch && git checkout origin/cicd;
        else
                echo 'Cloning git repository...'
                echo $GIT_IS_ALIVE
                git clone https://acederberg:$RUNNER_TOKEN@gitlab.com/adrn.cederberg123/ReactMarkdownEditor.git .
                git checkout origin/cicd
        fi
# Build the api using the typescript compiler.
# Hold on to build.
build-dev-images:
  tags: [ 'build' ]
  stage: build-dev-images
  script:
    - 'echo "Building images using docker-compose."'
    - >
      if [ $LAZY -eq 0 ]; then
        docker-compose --file docker-compose.dev.yaml up --detach --build 
      else
        echo -e "\e[031mWARNING: LAZY=true. Too lazy to rebuild devlopment images. These will mount changes to the code but will not rebuild images.\e[0m"
        docker-compose --file docker-compose.dev.yaml up --detach
      fi

build-api:
  variables : 
    DIST_IS_EMPTY : ls ./api/dist/ | wc --words
  tags : [ 'build' ]
  stage: build-api
  script:
    - echo "Compiling typescript...."
    - >
      if [ $LAZY -eq 0 ]; then
        docker exec api npm run build-prod
      else
        echo -e "\e[31mWARNING: Too lazy to compile.\e[0"
      fi

build-ui:
  tags : [ 'build' ]
  stage : build-ui
  script:
    - echo "Building ui..."
    - >
      if [ $LAZY -eq 0 ]; then 
        docker exec ui npm run build-prod \
      else
        echo -e "\e[31WARNING: Too lazy to build.\e[0"
      fi

test-api:
  tags: [ 'test' ]
  stage: test-api
  script:
    - echo "Testing api..."
    - docker exec api npx env-cmd --file .env.dev jest --forceExit

# Clean up to avoid potential naming conflicts.
teardown-dev: 
  tags : [ 'build' ]
  stage : 'teardown-dev'
  script:
    - echo 'Killing remaining containers.'
    - docker ps -aq | xargs docker stop
    - docker ps -aq | xargs docker rm  

# Build the ( production ) containers
build-production-images: 
  tags : [ 'build' ]
  stage : 'build-production-images'
  script :
    - echo "building production images..."
    - > 
      if [ $LAZY -eq 0 ]; then
        docker-compose --file docker-compose.prod.yaml build api ux
      else
        echo -e "\e[31mWARNING: Too lazy too rebuild images.\e0m]"
      fi

distribute-images:
  tags : [ 'build' ]
  stage : 'distribute-images'
  script :
    - echo "pushing images to dockerhub."
    - > 
      if [ $LAZY -eq 1 ]; then
        docker push acederberg/portfolio_images:ui_prod && docker push acederberg/portfolio_images:api_prod
      else
        echo "\e[31mWARNING: Too lazy too push images. It makes since as they were not build in the last step."
      fi

deploy:
  tags : [ 'build' ]
  stage : 'deploy'
  script :
    - echo "running ansible...."
