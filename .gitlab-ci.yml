# Built using the guide: 
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html

# Objective:
# 0. Create development image for tests to run in. ( Docker in docker. )
# 1. Test applications ( if applicable ) in their development containers. ( Docker in docker )
# 2. Build production images using docker-compose. ( Docker in docker )
# 3. Push the production images to DockerHub. ( Docker in docker )
# 4. Run an ansible playbook to deploy everything. ( Somewhere else )

stages:         
  - build-api
  #- build-ui-code
  - build-dev-images
  - test-api
  - teardown-dev
  - build-production-images

# Build the api using the typescript compiler.
# Hold on to build.
build-dev-images:
  tags: [ 'build-code' ]
  stage: build-dev-images
  script:
    # Exit code is still determined by docker-compose success.
    - echo "Building images using docker-compose."
    - docker compose --file docker-compose.dev.yaml up --build
    - echo "Collecting dependancies..."
    - npm install ./api/
    - npm install ./ui/
  artifacts:
    # Because it is stupid to redownload these every time.
    paths :
      - ./ui/node_modules/
      - ./api/node_modules/
    expire_in: 30 days

build-api:
  tags : [ 'build-code' ]
  stage: build-api
  script:
    - echo "Compiling typescript...."
    - docker exec ui npm exec tsc
  artifacts:
    paths : [ ./api/dist ]

test-api:
  tags: [ 'test' ]
  stage: test-api
  script:
    - echo "Testing api..."
    - docker exec npm exec jest

# Clean up to avoid potential naming conflicts.
teardown-dev:
  tags : [ 'test', 'build-containers' ]
  stage : 'teardown-dev'
  script :
    - docker compose --file docker-compose.dev.yaml down
    - docker compose --file docker-compose.prod.yaml down

# Build the ( production ) containers
build-production-images: 
  tags : [ 'build-containers' ]
  stage : 'build-production-images'
  script :
    - ls -lah api
    - ls -lah ui  #&& echo "Building docker images..."
    #- docker compose --file docker-compose.prod.yaml build && echo "Production docker images built."

