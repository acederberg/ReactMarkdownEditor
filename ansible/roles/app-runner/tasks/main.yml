---
# USERS 
# tasks file for roles/app-runner
- include_vars : "../vars/main.{env}.yml"
- include_vars : "../vars/common.yml"
- name : "Create the app-runner user."
  tags : [ "install", "security", "app-runner" ]
  user :
    name : app-runner
    groups : sudo,docker
    password : '{{password2}}'
  become : true


- name : "Change the ansible users password."
  tags : [ "install", "security", "app-runner" ]
  user :
    name : ansible
    groups : sudo,docker
    password : '{{password3}}'
  become : true


- name : "Determine if the vagrant user exists."
  tags : [ "install", "security", "app-runner" ]
  # Test by looking for the home directory since vagrant always makes a home directory.
  shell : ls /home | grep vagrant | wc --word
  register: vagrant_exists


- name : "Change the vagrant user if it exists."
  tags : [ "install", "security", "app-runner" ]
  user :
    name : vagrant
    password : '{{password1}}'
  when : >
    vagrant_exists != '0'
  become : true



# RESOURCES
# Read this snippet about adding encrypted data: https://ahelpme.com/software/ansible/ansible-using-ansible-vault-with-copy-module-to-decrypt-on-the-fly-files/.
- name : "RESOURCES: Make a folder for docker-compose.yaml and artifacts"
  tags : [ "deploy", "docker-container", "app-runner" ]
  shell : test -d /home/ansible/app || mkdir /home/ansible/app


- name : "RESOURCES: Copy docker compose into /home/ansible/app."
  tags : [ "deploy", "docker-container", "app-runner", "current" ]
  template : 
    src : ./docker-compose.yaml.j2
    dest : /home/ansible/app/docker-compose.yaml
    force : true # Because update should be pushed.


- name : "RESOURCES: Add the .env for the api container."
  tags : [ "deploy", "docker-container", "app-runner", "current" ]
  template : 
    src : ./.env.api_prod.j2
    dest : /home/ansible/app/.env.api_prod
    force : true


- name : "RESOURCES: Add the dockerfile for the api container to copy the .env into the api container."
  tags : [ "deploy", "docker-container", "app-runner", "current" ]
  template : 
    src : ./Dockerfile.api_prod.j2
    dest : /home/ansible/app/Dockerfile.api_prod
    force : true
  


# DOCKER
# Some more stuff following along with ["The Digital Life"'s fantastic tutorial](https://www.youtube.com/watch?v=CQk9AOPh5pw&t=712s).
# This is a convenient GUI for docker. Note that these ports must also be exposed on the vagrant machine.
- name : "DOCKER: Add front network"
  tags : [ "deploy", "docker-container", "app-runner" ]
  community.docker.docker_network :
    name : front
    driver : 'bridge'
    attachable : true


- name : "DOCKER: Add back network"
  tags : [ "deploy", "docker-container", "app-runner" ]
  community.docker.docker_network :
    name : back
    driver : 'bridge'
    attachable : true


- name : "DOCKER: Add portainer"
  tags : [ "deploy", "docker-container", "app-runner" ]
  community.docker.docker_container :
    name : portainer
    ports : 
      - '9000:9000'
      - '8000:8000'
    image : portainer/portainer-ce
    networks :
      - name : back
    volumes :
      # Mount the docker socket.
      - /var/run/docker.sock:/var/run/docker.sock
      # Persist data in a volume.
      - portainer_data:/data
    restart_policy: always
  become : true


- name : "DOCKER: Add Nginx Proxy Manager Database"
  tags : [ "deploy", "docker-container", "app-runner" ]
  community.docker.docker_container :
    # More info: https://github.com/jc21/docker-mariadb-aria
    name : '{{npm_db}}'
    image : jc21/mariadb-aria:latest
    env :
      MYSQL_ROOT_PASSWORD : '{{npm_db_root_password}}'
      MYSQL_DATABASE : 'npm'
      MYSQL_USER : '{{npm_db_username}}'
      MYSQL_PASSWORD : '{{npm_db_password}}'
    networks :  
      - name  : back 
    volumes :
      - ./app/data/mysql:/var/lib/mysql


- name : "DOCKER: Add Nginx Proxy Manager."
  tags : [ "deploy", "docker-container", "app-runner" ]
  community.docker.docker_container : 
    image: 'jc21/nginx-proxy-manager:latest'
    name : NPM
    ports :
      - '80:80'
      - '81:81'
      - '443:443'
    env :
      DB_MYSQL_HOST : '{{npm_db}}'
      DB_MYSQL_PORT : '3306'
      DB_MYSQL_USER : '{{npm_db_username}}'
      DB_MYSQL_PASSWORD : '{{npm_db_password}}'
      DB_MYSQL_NAME : 'npm'
    networks :  
      - name : back 
      - name : front
    volumes :
      - ./app/data:/data
      - ./app/letsencrypt:/etc/letsencrypt


- name : "DOCKER: Login to dockerhub"
  tags : [ "deploy", "docker-container", "app-runner", "login", "security" ]
  community.docker.docker_login :
    username : '{{dockerhub_username}}'
    password : '{{dockerhub_password}}'


- name : "DOCKER: Pull production ui images."
  tags : [ "deploy", "docker-container", "app-runner", "current" ]
  community.docker.docker_image:
    repository : '{{dockerhub_repo}}'
    tag : ui_prod
    source : pull
    force_source : true
    state : present
    name : '{{dockerhub_repo}}'


- name : "DOCKER: Pull production api image."
  tags : [ "deploy", "docker-container", "app-runner", "current" ]
  community.docker.docker_image:
    repository : '{{dockerhub_repo}}'
    tag : api_prod
    source : pull
    force_source : true
    state : present
    name : '{{dockerhub_repo}}'


- name : "DOCKER: Run the deployment docker compose."
  tags : [ "deploy", "docker-container", "app-runner", "current", "now" ]
  become : true
  community.docker.docker_compose :
    project_src : "/home/ansible/app"
    build : true
    state : present
