$UndefinedMode = "Undefined Mode."


function get-IPAddr
{
	param( $name )
	return ( vagrant ssh $name -c "ip address show eth0 | grep 'inet ' | sed -e 's/^.*inet //' -e 's/\/.*$//'" )
}


function new-TestHosts
{
	
  # Make a new hosts file and return a list of hosts.
	$outfile = '../test_hosts.ini'
  if ( test-Path $outfile ){ rm $outfile }

	$hosts  = ( @( 'gitlab-runner', 'app-runner' ) | forEach-Object{ get-IPAddr -name $_ } )
	$addrs = @{
		my_runner = $hosts[0];
		my_server = $hosts[1];
	}
	
	# Build file
	echo '# This is an autogenerated file' | out-File $outfile -append -encoding utf8

	forEach ( $item in $addrs.GetEnumerator() ){
		echo $item.Value
		echo ( '[{0}]' -f $item.Name )| out-File $outfile -append -encoding utf8
		echo $item.Value | out-File $outfile -append -encoding utf8
	}
	
	return $hosts

}


function new-Vagrant
{
	vagrant.exe destroy -f
	vagrant.exe up
}


function restart-Ansible
{
	
	$ansible = 'ansible-runner'
	$all_containers = docker container ls -a --format '{{.Names}}' 
	$active_containers = docker container ls --format '{{.Names}}'

	# Container does not exist
	if ( !($all_containers -contains $ansible ) )
	{
		out-Host -InputObject ( 'Creating {0}.' -f $ansible )
		docker compose --file ../docker-compose.yaml up --detach 
	}
	# Container is already running.
	elseIf( $active_containers -contains $ansible )
	{
		out-Host -InputObject ( '{0} is already active.' -f $ansible )
	}
	else{
		out-Host -InputObject ( 'Start {0}.' -f $ansible )
		docker start ansible-runner
	}

}


function create-SSHKey
{

	param( $mode )

	$args = "ssh-keygen -N '' -f '/home/{0}/.ssh/id_rsa'"

	if ( $mode -eq 'docker' )
	{
		docker exec ansible-runner mkdir '/home/ansible/.ssh'
		docker exec ansible-runner bash -c ( $args -f 'ansible' )
	}
	elseIf ( $mode -eq 'vagrant' )
	{
		cd ..
		vagrant ssh -c ( $args -f 'vagrant' )
		cd vagrant
	}
	else
	{ out-Host -InputObject $UndefinedMode }

}


function distribute-SSHKey
{
	param( $mode, $host_ )

	$args = "ssh-copy-id -f ansible@{0}" -f $host_
	out-Host -InputObject ( "Adding ssh key to {0}" -f $host_ ) 
	if ( $mode -eq 'docker' )
	{
			docker exec -it ansible-runner bash -c $args
	}
	elseIf ( $mode -eq 'vagrant' )
	{
			cd .. 
			vagrant ssh -c $args
			cd vagrant 
	}
	else
	{
		out-Host -InputObject $UndefinedMode
	}

}


function distribute-SSHKeys
{

	param( $hosts, $mode )
	echo $hosts
	$hosts | forEach-Object{
		echo $_
		distribute-SSHKey -mode $mode -host_ $_
	}
}


function main(){
	
	param( $vagrant, $mode )

  if ( $vagrant -eq $true ){ new-Vagrant }

	$hosts = new-TestHosts
	
	if ( $mode -eq 'docker' ){ restart-Ansible }
	
	create-SSHKey -mode $mode
	distribute-SSHKeys -hosts $hosts	-mode $mode
	
	# Remove Byte Ordering Mark for unix.
	if ( $mode -eq 'docker' )
	{
		docker exec -it ansible-runner bash -c "sed -i $'1s/^\357\273\277//' test_hosts.ini"
	}
	elseIf ( $mode -eq 'vagrant' )
	{
		cd ..
		vagrant ssh -c "sed -i $'1s/^\357\273\277//' test_hosts.ini"
		cd vagrant
	}
	else
	{
		out-Host -inputObject $UndefinedMode
	}

}

