$UndefinedMode = "Undefined Mode."
$VAGRANT_DIR = $ENV:VAGRANT_DIR
$ANSIBLE_DIR = $ENV:VAGRANT_DIR + '/..'
$ANSIBLE_DOCKER_COMPOSE = $ANSIBLE_DIR + '/docker-compose.yaml'

$ANSIBLE_RUNNER_WORKDIR = $ANSIBLE_RUNNER_WORKDIR + "/app"
$ANSIBLE_RUNNER_HOMEDIR = "/home/ansible"
$PLAYBOOK_MAIN = $ANSIBLE_RUNNER_WORKDIR + "/playbook.yaml"
$PLAYBOOK_BACKUP = $ANSIBLE_RUNNER_WORKDIR + "/backup.yaml"


$LOCAL_INVENTORY =  $ANSIBLE_DIR + "/test_hosts.ini"
$REMOTE_INVENTORY = $ANSIBLE_RUNNER_WORKDIR + "/test_hosts.ini"


function get-Line{ 	echo "=======================================================" }


function get-LocalIPAddr
{
	param( $name )
	return ( vagrant ssh $name -c "ip address show eth0 | grep 'inet ' | sed -e 's/^.*inet //' -e 's/\/.*$//'" )
}


function new-LocalInventory
{
	$there = $PWD
	cd $VAGRANT_DIR
	
  # Make a new hosts file and return a list of hosts.
	$outfile = '../test_hosts.ini'
  if ( test-Path $outfile ){ rm $outfile }

	$hosts  = ( @( 'gitlab-runner', 'app-runner' ) | forEach-Object{ get-LocalIPAddr -name $_ } )
	$addrs = @{
		my_runner = $hosts[0];
		my_server = $hosts[1];
	}
	
	# Build file
	echo '# This is an autogenerated file' | out-File $outfile -append -encoding utf8

	forEach ( $item in $addrs.GetEnumerator() ){
		echo ( '[{0}]' -f $item.Name )| out-File $outfile -append -encoding utf8
		echo $item.Value | out-File $outfile -append -encoding utf8
	}
	cd $there
	return $hosts

}


function remove-BOMFromInventory
{

	param( $mode, $inventory )

	if ( $inventory -eq $null ){ $inventory = 'test_hosts.ini' }
	if ( $mode -eq 'docker' )
	{
		$cmd = "sed -i $'1s/^\357\273\277//' {0}" -f $inventory 
		docker exec -it ansible-runner bash -c $cmd
		
	}
	elseIf ( $mode -eq 'vagrant' )
	{
		$there = $PWD
		cd $ANSIBLE_DIR
		$cmd = "sudo sed -i $'1s/^\357\273\277//' /home/ansible/app/{0}" -f $inventory 
		echo $cmd
		vagrant ssh -c $cmd
		cd $there
	}
	else
	{
		out-Host -inputObject $UndefinedMode
	}

}


function rebuild-LocalAppRunner
{
	$there = $PWD
	cd $VAGRANT_DIR

	$hosts = @( 'app-runner'; 'gitlab-runner' )
	$hosts | forEach-Object{
		vagrant.exe destroy -f $_
	}
	vagrant.exe up

	cd $there
}


function restart-LocalAnsibleContainer
{
	$ansible = 'ansible-runner'
	$all_containers = docker container ls -a --format '{{.Names}}' 
	$active_containers = docker container ls --format '{{.Names}}'

	# Container does not exist
	if ( !($all_containers -contains $ansible ) )
	{
		out-Host -InputObject ( 'Creating {0}.' -f $ansible )
		docker compose --file $ANSIBLE_DOCKER_COMPOSE up --detach 
	}
	# Container is already running.
	elseIf( $active_containers -contains $ansible )
	{
		out-Host -InputObject ( '{0} is already active.' -f $ansible )
	}
	else{
		out-Host -InputObject ( 'Start {0}.' -f $ansible )
		docker start ansible-runner
	}
}


function restart-LocalAnsibleRunner
{
	param( $mode )
	if ( $mode -eq 'vagrant' )
	{
		$there = $PWD
		cd $ANSIBLE_DIR

		$runner = get-VM | where-Object{ $_.Name -match 'ansible-runner' }
		if ( $runner.State -ne "Running" )
		{
			out-Host -InputObject "Bringing up local ansible runner"
			vagrant.exe  up
		}
		else 
		{
			out-Host -InputObject "Ansible-runner is already running"
		}
		
		cd $there
	}
	elseIf ( $mode -eq 'docker' )
	{
		restart-LocalAnsibleContainer
	}
	else
	{
		out-Host -InputObject $UndefinedMode
	}
}


function new-SSHKey
{
	# Add parameter to rotate.
	param( $mode )

	$args = "ssh-keygen -N '' -f '/home/{0}/.ssh/id_rsa'"

	if ( $mode -eq 'docker' )
	{
		docker exec ansible-runner mkdir '/home/ansible/.ssh'
		docker exec ansible-runner bash -c ( $args -f 'ansible' )
	}
	elseIf ( $mode -eq 'vagrant' )
	{
		$there = $PWD
		cd $ANSIBLE_DIR
		$addr = get-LocalIPAddr
		ssh ansible@$addr ( $args -f 'ansible' )
		cd $there
	}
	else
	{ out-Host -InputObject $UndefinedMode }

}


function invoke-SSHKey
{
	param( $mode, $host_, $ansibleAddr )

	out-Host -InputObject ( "Adding ssh key to {0}" -f $host_ ) 

	if ( $mode -eq 'docker' )
	{
			$args = "ssh-copy-id -f ansible@{0}" -f $host_
			docker exec -it ansible-runner bash -c $args
	}
	elseIf ( $mode -eq 'vagrant' )
	{
			$there
			cd $ANSIBLE_DIR

			$addr = get-LocalIPAddr
			ssh -t ansible@$addr ( "ssh-copy-id -i ~/.ssh/id_rsa.pub {0}" -f $host_ ) 

			cd $there 
	}
	else
	{
		out-Host -InputObject $UndefinedMode
	}

}


function invoke-SSHKeys
{
	param( $hosts, $mode )
	echo $hosts
	$hosts | forEach-Object{
		echo $_
		invoke-SSHKey -mode $mode -host_ $_
	}
}


function rebuild-LocalAppRunnerEnvironment(){
	
	param( 
		$vagrant, 	# run the new vagrant step when true.
		$mode, 			# Either vagrant or docker. 
		$SSHKeys 		# Do ssh key stuff when true. Do not do after initial ssh-keys. Functionality must be added.
	)

	$there = $PWD
	cd $VAGRANT_DIR

	# Rebuild vagrant
  if ( $vagrant -eq $true )
	{ 
		get-Line
		rebuild-LocalAppRunner 
	}
	get-Line
	$hosts = new-LocalInventory
	
	# Start the ansible runner if it is nost.
	get-Line
	restart-LocalAnsibleRunner  -mode $mode
	
	# Make a new ssh_key
	if ( $SSHKeys -eq $true )
	{
		get-Line
		new-SSHKey -mode $mode

		get-Line
		invoke-SSHKeys -hosts $hosts	-mode $mode
	}

	# Remove Byte Ordering Mark for unix.
	get-Line
	remove-BOMFromInventory -mode $mode

	cd $there

}


function share-Secrets
{
	param( $secretPath )
	$there = $PWD
	cd $ANSIBLE_DIR
	
	$ansibleIPAddr = get-LocalIPAddr
  $destination = ( 'ansible@{0}:{1}' -f $ansibleIPAddr, $ANSIBLE_RUNNER_HOMEDIR )
	echo $destination
	scp $secretPath $destination

	cd $there
}


function invoke-AnsiblePlaybook
{

	param ( 
		$runnerIPAddr,
		$hosts,
		$playbook,
		$extraVariables,
		$tags
	)

	$there = $PWD
	cd $VAGRANT_DIR/..

	$optional = ""

	if ( $extraVariables -ne $null )
	{
		$optional = $optional + ( "--extra-variables {0}" -f $extraVariables )
	}
	if ( $tags -ne $null )
	{
		$optional = $optional + ( "--tags {0}" -f $tags )
	}

	# $ANSIBLE_VAULT_PASSWORD_FILE is defined in powershell profile
	$cmd = 'ansible-playbook {0} -i {1} {2} --ask-vault' -f $playbook, $hosts, $optional
	out-Host -inputObject $cmd
	ssh ansible@$runnerIPAddr $cmd
	cd $there

}


function invoke-FullMainAnsiblePlaybook
{ 
	param( $runnerIPAddr )
	get-Line
	invoke-AnsiblePlaybook -hosts $REMOTE_INVENTORY -playbook $PLAYBOOK_MAIN -runnerIPAddr $runnerIPAddr
}


function new-LocalAppRunner
{

	# GOAL : Pull backups from the cloud or from a local server. 
	# Make a new instance from this data from a new vagrant machine.
	cd $ANSIBLE_DIR
	$runnerIPAddr = get-LocalIPAddr

	# 1. Backup volumes prior to tearing down.
	invoke-AnsiblePlaybook -playbook $PLAYBOOK_BACKUP -hosts $REMOTE_INVENTORY -tags "capture" -runnerIPAddr $runnerIPAddr

	# 2. Tear down the vagrant machines, rebuild the local development environment.
	rebuild-LocalAppRunnerEnvironment -mode 'vagrant' -vagrant $true -SSHKeys $true

	# 3. Distribute volumes to the new machines.
	get-Line
	invoke-AnsiblePlaybook -playbook $PLAYBOOK_BACKUP -hosts $REMOTE_INVENTORY -tags "distribute" -runnerIPAddr $ansible_runner_addr 

	# 4. Run the main playbook on the main machines. This will deploy everything.
	# N.B. Usually have to do this twice, thus the try catch.
	try {		invoke-FullMainAnsiblePlaybook -runnerIPAddr $ansible_runner_addr }
	catch { invoke-FullMainAnsiblePlaybook -runnerIPAddr $ansible_runner_addr }

}

