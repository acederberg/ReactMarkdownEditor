$UndefinedMode = "Undefined Mode."
$VAGRANT_DIR = $ENV:VAGRANT_DIR

function get-Line{ 	echo "=======================================================" }


function get-LocalIPAddr
{
	param( $name )
	return ( vagrant ssh $name -c "ip address show eth0 | grep 'inet ' | sed -e 's/^.*inet //' -e 's/\/.*$//'" )
}


function new-LocalAppRunnerHostsFile
{
	cd $VAGRANT_DIR
	
  # Make a new hosts file and return a list of hosts.
	$outfile = '../test_hosts.ini'
  if ( test-Path $outfile ){ rm $outfile }

	$hosts  = ( @( 'gitlab-runner', 'app-runner' ) | forEach-Object{ get-LocalIPAddr -name $_ } )
	$addrs = @{
		my_runner = $hosts[0];
		my_server = $hosts[1];
	}
	
	# Build file
	echo '# This is an autogenerated file' | out-File $outfile -append -encoding utf8

	forEach ( $item in $addrs.GetEnumerator() ){
		echo ( '[{0}]' -f $item.Name )| out-File $outfile -append -encoding utf8
		echo $item.Value | out-File $outfile -append -encoding utf8
	}
	
	return $hosts

}


function rebuild-LocalAppRunner
{
	cd $VAGRANT_DIR

	vagrant.exe destroy -f
	vagrant.exe up
}


function restart-AnsibleContainerContainerContainer
{
	
	$ansible = 'ansible-runner'
	$all_containers = docker container ls -a --format '{{.Names}}' 
	$active_containers = docker container ls --format '{{.Names}}'

	# Container does not exist
	if ( !($all_containers -contains $ansible ) )
	{
		out-Host -InputObject ( 'Creating {0}.' -f $ansible )
		docker compose --file ../docker-compose.yaml up --detach 
	}
	# Container is already running.
	elseIf( $active_containers -contains $ansible )
	{
		out-Host -InputObject ( '{0} is already active.' -f $ansible )
	}
	else{
		out-Host -InputObject ( 'Start {0}.' -f $ansible )
		docker start ansible-runner
	}

}


function new-SSHKey
{
	# Add parameter to rotate.
	param( $mode )

	$args = "ssh-keygen -N '' -f '/home/{0}/.ssh/id_rsa'"

	if ( $mode -eq 'docker' )
	{
		docker exec ansible-runner mkdir '/home/ansible/.ssh'
		docker exec ansible-runner bash -c ( $args -f 'ansible' )
	}
	elseIf ( $mode -eq 'vagrant' )
	{
		cd ..
		$addr = get-LocalIPAddr
		ssh ansible@$addr ( $args -f 'ansible' )
		cd vagrant
	}
	else
	{ out-Host -InputObject $UndefinedMode }

}


function share-SSHKey
{
	param( $mode, $host_, $ansibleAddr )

	out-Host -InputObject ( "Adding ssh key to {0}" -f $host_ ) 
	if ( $mode -eq 'docker' )
	{
			$args = "ssh-copy-id -f ansible@{0}" -f $host_
			docker exec -it ansible-runner bash -c $args
	}
	elseIf ( $mode -eq 'vagrant' )
	{
			cd .. 
			$addr = get-LocalIPAddr
			ssh -t ansible@$addr ( "ssh-copy-id -i ~/.ssh/id_rsa.pub {0}" -f $host_ ) 
			cd vagrant 
	}
	else
	{
		out-Host -InputObject $UndefinedMode
	}

}


function share-SSHKeys
{

	param( $hosts, $mode )
	echo $hosts
	$hosts | forEach-Object{
		echo $_
		share-SSHKey -mode $mode -host_ $_
	}
}


function rebuild-LocalAppRunnerEnvironment(){
	
	param( 
		$vagrant, 	# run the new vagrant step when true.
		$mode, 			# Either vagrant or docker. 
		$SSHKeys 	# Do ssh key stuff when true. Do not do after initial ssh-keys. Functionality must be added.
	)

	cd $VAGRANT_DIR

	# Rebuild vagrant
  if ( $vagrant -eq $true )
	{ 
		get-Line
		rebuild-LocalAppRunner 
	}
	
	# Rebuild test_hosts.ini
	get-Line
	$hosts = new-LocalAppRunnerHostsFile
	
	# Restart the docker container.
	if ( $mode -eq 'docker' ){ 
		get-Line
		restart-AnsibleContainerContainerContainer 
	}

	# Make a new ssh_key
	if ( $SSHKeys -eq $true )
	{
		get-Line
		new-SSHKey -mode $mode
		get-Line
		share-SSHKeys -hosts $hosts	-mode $mode
	}

	
	# Remove Byte Ordering Mark for unix.
	get-Line
	if ( $mode -eq 'docker' )
	{
		docker exec -it ansible-runner bash -c "sed -i $'1s/^\357\273\277//' test_hosts.ini"
	}
	elseIf ( $mode -eq 'vagrant' )
	{
		cd ..
		vagrant ssh -c "sudo sed -i $'1s/^\357\273\277//' /home/ansible/app/test_hosts.ini"
		cd vagrant
	}
	else
	{
		out-Host -inputObject $UndefinedMode
	}

}


$PLAYBOOK = playbook.yaml 

function invoke-AnsiblePlaybook
{
	param ( 
		$hosts, 
		$extraVariables,
		$tags
	)

	cd $VAGRANT_DIR/..

	$ansible_runner_addr = get-LocalIPAddr
	$optional = ""

	if ( $extraVariables -ne $null )
	{
		$optional = $optional + ( "--extra-variables {0}" -f $extraVariables )
	}
	if ( $tags -ne $null )
	{
		$optional = $optional + ( "--tags {0}" -f $tags )
	}

	ssh $ansible_runner_addr `
		ansible $PLAYBOOK `
			-i $hosts \
			--extra-variables $extraVariables \
			--tags $tags

}


function rebuild-LocalAppRunner
{

	# GOAL : Pull backups from the cloud or from a local server. 
	# Make a new instance from this data from a new vagrant machine.

	params ( $hosts )

	# Backup volumes prior to tearing down.
	invoke-AnsiblePlaybook -hosts $hosts -tags "capture"

	# Tear down the vagrant machines.
	rebuild-LocalAppRunnerEnvironment

	# Distribute volumes to the new machines.
	invoke-AnsiblePlaybook -hosts $hosts -tags "distribute"

	# Run the main playbook on the main machines.
	# Usually have to do this twice, thus the try catch.
	# Not sure why it does that.
	try: invoke-AnsiblePlaybook -hosts $hosts
	catch : invoke-AnsiblePlaybook -hosts $hosts 

}

